/**
* {{&summary}}
* @method
{{#externalDocs}}
* @see {@link {{&url}}|{{#description}}{{&description}}{{/description}}{{^description}}External docs{{/description}}}
{{/externalDocs}}
* @name {{&className}}#{{&methodName}}
{{#parameters}}
    {{^isSingleton}} * @param {{=<% %>=}}{<%&type%>}<%={{ }}=%> {{&camelCaseName}} - {{&description}}{{/isSingleton}}
{{/parameters}}
*/
{{&methodName}}(parameters: {
{{#parameters}}{{^isSingleton}}{{&camelCaseName}}{{&cardinality}}: {{> type}},
{{/isSingleton}}{{/parameters}}
      //$queryParameters?: {}
    } & RequestOptions): ng.IPromise<{{&tsType}}|any>
{
    let path = '{{&basePath}}{{&path}}';
    let body, form{{#hasForm}} = {}{{/hasForm}};
    let queryParameters = {};
    let headers = {};

{{#isSecure}}
    headers = this.setAuthHeaders(headers);
{{/isSecure}}
{{#headers}}
    headers['{{&name}}'] = [{{&value}}];
{{/headers}}

{{#parameters}}
    {{#isQueryParameter}}
        {{#isSingleton}}
            queryParameters['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            {{#isPatternType}}
                Object.keys(parameters).forEach(function(parameterName) {
                    if(new RegExp('{{&pattern}}').test(parameterName)){
                        queryParameters[parameterName] = parameters[parameterName];
                    }
                });
            {{/isPatternType}}
            {{^isPatternType}}
                //if(parameters.{{&camelCaseName}} !== undefined){
                    queryParameters['{{&name}}'] = parameters.{{&camelCaseName}}{{#default}}|| {{&default}}{{/default}};
                //}
            {{/isPatternType}}
        {{/isSingleton}}
    {{/isQueryParameter}}

    {{#isPathParameter}}
        path = path.replace('{{=<% %>=}}{<%&name%>}<%={{ }}=%>', parameters.{{&camelCaseName}});
    {{/isPathParameter}}

    {{#isHeaderParameter}}
        {{#isSingleton}}
            headers['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                headers['{{&name}}'] = parameters['{{&camelCaseName}}'];
            }
        {{/isSingleton}}
    {{/isHeaderParameter}}

    {{#isBodyParameter}}
        {{#isOptional}}
        if(parameters['{{&camelCaseName}}'] !== undefined){
            body = parameters.{{&camelCaseName}};
        }
        {{/isOptional}}
        {{^isOptional}}
            body = parameters.{{&camelCaseName}};
        {{/isOptional}}
    {{/isBodyParameter}}

    {{#isFormParameter}}
        {{#isSingleton}}
            form['{{&name}}'] = '{{&singleton}}';
        {{/isSingleton}}
        {{^isSingleton}}
            if(parameters['{{&camelCaseName}}'] !== undefined){
                form['{{&name}}'] = parameters['{{&camelCaseName}}'];
            }
        {{/isSingleton}}
    {{/isFormParameter}}
{{/parameters}}

//queryParameters = {{&className}}.mergeQueryParams(parameters, queryParameters);

return this.request('{{method}}', this.domain + path, parameters, body, headers, queryParameters, form);
}
